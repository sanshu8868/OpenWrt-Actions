
#
#版权所有 （c） 2019-2020 P3TERX <https://p3terx.com>
#
#这是根据 MIT 许可证授权的免费软件。
#有关更多信息，请参阅 /LICENSE。
#
# https://github.com/P3TERX/Actions-OpenWrt
#描述： 使用 GitHub Actions 构建 OpenWrt
#

名称： RAX3000Me

开：
  推送：
    分支：
      - 主要
    路径：
      - 'RAX3000Me/.config'
  workflow_dispatch：
  时间表：
    - cron： '0 0 1 * *'

环境：
  REPO_URL：https://github.com/dailook/immortalwrt-mt798x-23.05.git
  REPO_BRANCH：openwrt-23.05
  FEEDS_CONF：RAX3000Me/feeds.conf.default
  CONFIG_FILE：RAX3000Me/.config
  DIY_P1_SH：RAX3000Me/diy1.sh
  DIY_P2_SH：RAX3000Me/diy2.sh
  UPLOAD_FIRMWARE：false
  UPLOAD_RELEASE：true
  TELEGRAM_BOT_TOKEN：${{ secrets。TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHATID：${{ secrets。TELEGRAM_CHATID }}
  TZ： 亚洲/上海

工作机会：
  build：
    运行时间： ubuntu-20.04

    步骤：
    - name： 检查项目分支
      用途：作/checkout@main

    - name： 初始化编译环境
      环境：
        DEBIAN_FRONTEND：非交互式
      运行： |
sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
sudo apt 更新
sudo bash -c 'bash <（curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh）'
sudo apt autoremove --purge
sudo apt 清洁
sudo timedatectl set-timezone “$TZ”
sudo mkdir -p /workdir
sudo chown $USER：$GROUPS /workdir
echo “FIRMWARE_VERSION=$（date +”%y%m%d“）” >> $GITHUB_ENV
echo “START_DATE=$（date +%s）” >> $GITHUB_ENV
    - 名称： 下载源码
      工作目录：/workdir
      运行： |
df -hT $PWD
git clone --single-branch -b $REPO_BRANCH $REPO_URL openwrt
ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
    - 名称： 加载软件源
      运行： |
[ -e $FEEDS_CONF ] & mv $FEEDS_CONF openwrt/feeds.conf.default
chmod +x $DIY_P1_SH
CD OpenWRT
$GITHUB_工作区/$DIY_P1_SH
    - name： 更新并安装软件源
      运行：cd openwrt & ./scripts/feeds update -a & ./scripts/feeds install -a

    - name： 加载自定义配置
      运行： |
[ -e RAX3000Me/文件] & mv RAX3000Me/文件openwrt/文件
[ -e $CONFIG_FILE ] & mv $CONFIG_FILE openwrt/.config
chmod +x $DIY_P2_SH
CD OpenWRT
$GITHUB_工作区/$DIY_P2_SH
    - 名称： 下载包
      id：包
      运行： |
CD OpenWRT
制作 defconfig
make download -j8
find dl -size -1024c -exec ls -l {} \;
find dl -size -1024c -exec rm -f {} \;
    - 名称： 编译固件
      id：编译
      运行： |
CD OpenWRT
echo -e “$（nproc） 线程编译”
使 -j$（nproc） ||使 -j1 ||使 -j1 V=s
echo “status=success” >> $GITHUB_OUTPUT
    - 名称： 整理文件
      ID：组织
      如果：steps.compile.outputs.status == '成功' & ！cancelled（）
      运行： |
# 整理固件包时候，删除您不想要的固件或者文件，让它不需要上传到Actions空间
cd openwrt/bin/目标/*/*
mkdir -p 软件包
mv packages 包/核心
mv 软件包
mv $GITHUB_WORKSPACE/openwrt/bin/packages/*/* 软件包
tar -czf packages.tar.gz 软件包
rm -rf 软件包
rm -rf 版本.buildinfo
rm -rf profiles.json
rm -rf *rootfs*
rm -rf 内核
rm -rf *.manifest
rm -rf feeds.buildinfo
rm -rf sha256sums
rm -rf 工具链
mv *sysupgrade.bin RAX3000Me-${{ env.FIRMWARE_VERSION }}-sysupgrade.bin ||echo 没有找到 *sysupgrade.bin 文件
mv *factory.bin RAX3000Me-${{ env.FIRMWARE_VERSION }}-factory.bin ||echo 没有找到 *factory.bin 文件
echo -e “$（sha256sum *）\n” > sha256sums
echo “FIRMWARE=$PWD” >> $GITHUB_ENV
echo “status=success” >> $GITHUB_OUTPUT
    - name： 上传固件到Github Actions空间
      如果： steps.organize.outputs.status == '成功' && env.UPLOAD_FIRMWARE == 'true'
      使用：actions/upload-artifact@main
      替换为：
        名称： RAX3000Me-${{ env.FIRMWARE_VERSION }}
        路径： ${{ env.固件 }}

    - name： 创建release标签
      id： 标签
      如果： steps.organize.outputs.status == '成功' & env.UPLOAD_RELEASE == 'true' && ！cancelled（）
      运行： |
echo “编译时间：$（date -d ”@${{ env.START_DATE }}“ +”%Y年%m月%d日 %H点%M分“）” >> release.txt
echo “默认网关：${host_ip}” >> release.txt
echo 包含插件：$（grep “CONFIG_PACKAGE_luci-app-\（.*\）=y” openwrt/.config | sed “s/CONFIG_PACKAGE_luci-app-\（.*\）=y/\1/g” | grep -v “_\|arpbind\|autoreboot\|firewall\|mtk\|opkg\mtwifi”） >> release.txt
echo “status=success” >> $GITHUB_OUTPUT
    - name： 将固件上传到release
      用途：softprops/action-gh-release@v1
      如果：steps.tag.outputs.status == '成功' & ！cancelled（）
      环境：
        GITHUB_TOKEN： ${{ 秘密。GITHUB_TOKEN }}
      ID：上传-发布
      替换为：
        名称： RAX3000Me-${{ env.FIRMWARE_VERSION }}
        tag_name：RAX3000Me
        body_path：release.txt
        文件： ${{ env.固件 }}/*

    - 名称：Telegram 通知
      如果： env.TELEGRAM_CHATID & env.TELEGRAM_BOT_TOKEN
      出错时继续：true
      运行： |
duration=$（（（$（date +%s）-${{ env.START_DATE }}）/60）） && time=$（（duration/60））小时$（（duration%60））分钟
if [ “${{ steps.compile.outputs.status }}” == '成功' ]; 然后
content=“🎉RAX3000Me固件编译成功🎉%0A固件版本：${{ env.FIRMWARE_VERSION }}%0A编译用时：${time}”
还
content=“❌RAX3000Me固件编译失败❌%0A固件版本：${{ env.FIRMWARE_VERSION }}%0A编译用时：${time}”
fi
curl “https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendMessage？chat_id=${{ env.TELEGRAM_CHATID }}&text=${content}”
